---
title: "L2"
author: "COMPASS workflows team"
title-block-banner: true
params:
  html_outfile: "L2.html"
  DATA_ROOT: "data_TEST/"
  L1: "L1/"
  L2: "L2/"
  QAQC_TABLE: "qaqc_table.csv"
  timestamp_round: "15 minutes"
  METADATA_ROOT: "metadata/"
  L2_METADATA: "L2_metadata/"
  # We use "Etc/GMT+5" rather than e.g. "America/New_York" for
  # L1_DATA_TIMEZONE because outputs should always be in STANDARD time
  # See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  L1_DATA_TIMEZONE: "Etc/GMT+5"
  L2_VERSION: "???"
  L2_RELEASE_DATE: "???"
  write_plots: true
  logfile: ""
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
format: 
  html:
    embed-resources: true
    code-fold: true
editor: visual
---

This script

-   Reads in the L1 data files one by one

-   Drops out of bounds (`F_OOB`) and out of service (`F_OOS`) rows

-   Drop NA data rows (shouldn't be any?)

-   Identifies and drops outliers

-   Averages to `r params$timestamp_round`, recording n_good and n_outliers

-   Fills in (NA) missing timestamps for the year

-   Computes new variables

-   Write L2 files

## Initializing

```{r init}
#| include: false

library(tidyr)
library(readr)
library(lubridate)

L1 <- file.path(params$DATA_ROOT, params$L1)
L2 <- file.path(params$DATA_ROOT, params$L2)

files_to_process <- list.files(L1, 
                               pattern = "[A-Z]{3}_[A-Z]{1,2}_[0-9]{8}-[0-9]{8}_.+csv$", 
                               full.names = TRUE, recursive = TRUE)

# **** TEMPORARY **** TODO
files_to_process <- list.files(L1, 
                               pattern = "SWH_SWAMP_20241130-[0-9]{8}_.+csv$", 
                               full.names = TRUE, recursive = TRUE)

QAQC_TABLE <- file.path(params$METADATA_ROOT, params$QAQC_TABLE)
qaqct <- read_csv(QAQC_TABLE, col_types = "ccccc")

source("helpers.R")
source("L2-utils.R")
```

I see `r length(files_to_process)` files to process in `r L1`.

QAQC table `r QAQC_TABLE` and has `r nrow(qaqct)` entries.

Output directory is `r L2`

HTML outfile is "`r params$html_outfile`".

## Processing

```{r processing}
overwrites <- 0
errors <- 0
dat_issues <- 0

f <- function(fn, out_dir) {
    message(Sys.time(), " Processing ", basename(fn))

    dat <- read_csv(fn, col_types = "ccTccccdccii")
    message("\tTotal data: ", nrow(dat), " rows, ", ncol(dat), " columns")

    # L1 data may have NA in out of bounds/service flags; fix
    dat <- replace_na(dat, list(F_OOB = 0, F_OOS = 0))

    # TODO: there might be more than one variable per file
    rn <- unique(dat$research_name)
    if(length(rn) > 1) {
        stop("Why is there more than one research name here?!?")
    }
    i <- match(rn, qaqct$variable)
    if(is.na(i)) stop(rn, " not found in QAQC table")
    if(length(i) > 1) stop(rn, " found in more than one row of QAQC table")
    
    # TODO: loop through the QAQC_ columns in the table
    if(is.na(qaqct$QAQC_mad[i])) {
        message("\tNo QAQC requested")
        dat$F_mad <- FALSE
    } else {
        message("\tRunning QAQC_mad")
        dotdotdot <- qaqct$QAQC_mad_params[i]
        dat <- do_outlier_test(dat, 
                               "QAQC_mad", 
                               time_grouping = qaqct$time_grouping[i], 
                               params = dotdotdot)
        if(sum(dat$F_mad)) {
            message("\t\t", sum(dat$F_mad), " outliers identified")
        }
    library(ggplot2)
    p <- ggplot(dat, aes(TIMESTAMP, Value, color = F_mad)) + 
        geom_point() + ggtitle(basename(fn))
    print(p)
    
    }
    
    # Log and remove F_* flags
    
    # File-based summary
    smry <- data.frame(File = basename(fn), 
                       Rows = nrow(dat),
                       F_mad = sum(dat$F_mad),
                       Pct = paste0(sprintf("%6.1f", 
                                     sum(dat$F_mad) / nrow(dat) * 100), "%"))
    
    # TODO
    # loop through all the F_ flags, count, add to summary table,
    # and do a single row removal
    
    message("\tWriting...")    
    write_csv(dat, file.path(params$DATA_ROOT, params$L2, basename(fn)))
    
    return(smry)
}

log_info("About to L2", logfile = params$logfile)
tryCatch({
    out <- lapply(files_to_process, f, out_dir = L2)
},
error = function(e) {
    log_warning("L2: an error occurred!", logfile = params$logfile)
    log_info(as.character(e), logfile = params$logfile)
    stop(e)
})
```

## Summary

```{r summary}
#| echo: false
#| output: asis
if(errors) {
    cat("### WARNING: ", errors, " file read/write error(s)\n")
    log_warning(paste("File read/write error(s)", params$html_outfile), 
                logfile = params$logfile)
}
```

```{r summary_table}
out_df <- do.call("rbind", out)
knitr::kable(out_df)
```

## Reproducibility

Git commit `r GIT_COMMIT`.

```{r reproducibility}
sessionInfo()
```
