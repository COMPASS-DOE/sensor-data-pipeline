---
title: "L2"
author: "COMPASS workflows team"
title-block-banner: true
params:
  html_outfile: "L2.html"
  DATA_ROOT: "data_TEST/"
  L2: "L2/"
  L2_QAQC: "L2_qaqc/"
  QAQC_TABLE: "qaqc_table.csv"
  timestamp_round: "15 min"
  METADATA_ROOT: "metadata/"
  RELEASE_README_FILES: "readme_files/"
  L2_METADATA: "L2_metadata/"
  L2_RELEASE_DATE: "???"
  L2_DATA_TIMEZONE: "Etc/GMT+5"
  L2_VERSION: "???"
  run_parallel: false
  write_plots: true
  logfile: ""
date: now
date-format: "YYYY-MM-DD HH:mm:ssZ"
format: 
  html:
    embed-resources: true
    code-fold: true
editor: visual
---

This script

-   Reads in the L2_qaqc data files one by one

-   Computes derived variables

-   Calls gap-filling algorithms (currently only mean annual cycle)

-   Writes L2 files and accompanying documentation

## Initializing

```{r init}
#| include: false

library(tidyr)
library(readr)
library(lubridate)
library(ggplot2)

L2_QAQC <- file.path(params$DATA_ROOT, params$L2_QAQC)
L2 <- file.path(params$DATA_ROOT, params$L2)

# Find all L1_qaqc files and build a table of their
# site/plot/research_name combinations
files_to_process <- list.files(L2_QAQC, 
                               pattern = "^[A-Z]{3}_[A-Z]{2,}_[0-9]{4}_.+csv$", 
                               full.names = TRUE, recursive = TRUE)
ftp_table <- tibble(file = files_to_process, filename = basename(files_to_process))
ftp_table <- separate(ftp_table, filename, 
                      into = c("site", "plot", "year", "research_name", 
                               "level", "qaqc", "version"), sep = "_", 
                      remove = FALSE)
site_rn_table <- unique(ftp_table[c("site", "plot", "research_name")])

QAQC_TABLE <- file.path(params$METADATA_ROOT, params$QAQC_TABLE)
qaqct <- read_csv(QAQC_TABLE, col_types = "cccccc")

source("helpers.R")
source("L2-utils.R")
```

I see `r nrow(site_rn_table)` site-plot-research_name combinations to process 
in `r L2_QAQC`, representing `r length(files_to_process)` files.

QAQC table `r QAQC_TABLE` and has `r nrow(qaqct)` entries.

Output directory is `r L2`

HTML outfile is "`r params$html_outfile`".

## MAC gap filling

```{r processing}
errors <- 0
smry <- site_rn_table
smry$Files <- 0
smry$Years <- ""
smry$GF_values <- smry$MAC_values <- smry$Values <- 0

for(i in seq_len(nrow(site_rn_table))) {
    si <- site_rn_table$site[i]
    pl <- site_rn_table$plot[i]
    rn <- site_rn_table$research_name[i]
    message("Processing ", si, " ", pl, " ", rn)
    
    # Identify files for this site, plot, and research name, and read
    these_files <- subset(ftp_table, site == si & plot == pl & research_name == rn)
    if(nrow(these_files) == 0) stop("No files! This shouldn't happen")
    smry$Files[i] <- length(these_files)
    
    message("\tReading ", nrow(these_files), 
            ifelse(nrow(these_files) > 1, " files", " file"))
    file_data <- lapply(these_files$file, function(f) {
        x <- read_csv(f, col_types = "Tcccccccdii")
        x$month <- month(x$TIMESTAMP)
        x$mday <- mday(x$TIMESTAMP)
        x$hour <- hour(x$TIMESTAMP)
        x$minute <- minute(x$TIMESTAMP)
        x
    })
    
    # Compute the mean annual cycle (MAC) across all sensors and files (years)
    message("\tComputing MAC...")
    all_data <- do.call(rbind, file_data)
    smry$Values[i] <- sum(!is.na(all_data$Value))
    yrs <- year(all_data$TIMESTAMP)
    smry$Years <- paste(min(yrs), max(yrs), sep = "-")
    mac <- aggregate(Value ~ month + mday + hour + minute, 
                     data = all_data, FUN = mean, na.action = na.omit)
    colnames(mac)[colnames(mac) == "Value"] <- "mac"
    smry$MAC_values[i] <- sum(!is.na(mac$mac))
    
    # For each file's data, add mac column, gap fill, and write out
    for(j in seq_len(nrow(these_files))) {
        dat <- file_data[[j]]
        oldrows <- nrow(dat)
        dat <- merge(dat, mac, 
                     by = c("month", "mday", "hour", "minute"), 
                     all.x = TRUE)
        stopifnot(nrow(dat) == oldrows) # sanity check

        # call gap-filling routine for each Instrument_ID and Sensor_ID
        # split doesn't work with NA values (???) so replace those...
        dat <- replace_na(dat, list(Instrument_ID = "", Sensor_ID = ""))
        # ...then split and apply
        dat_split <- split(dat, ~ Instrument_ID + Sensor_ID)
        dat_gf_list <- lapply(dat_split, function(x) {
            x <- x[order(x$TIMESTAMP),]
            x$GF_MAC <- fill_all_gaps(x$Value, x$mac)
            x
        })
        dat_gf <- do.call(rbind, dat_gf_list)
        rownames(dat_gf) <- NULL
        # Transfer good values into gap-fill column
        nagf <- is.na(dat_gf$GF_MAC)
        dat_gf$GF_MAC[nagf] <- dat_gf$Value[nagf]
        message("\tGap filled ", 
                sum(is.na(dat_gf$Value)) - sum(is.na(dat_gf$GF_MAC)),
                " values in ", these_files$filename[j])
        smry$GF_values[i] <- smry$GF_values[i] + sum(!is.na(dat_gf$GF_MAC))
        
        # Clean up and check that the data frame has correct columns
        dat_gf$month <- dat_gf$mday <- dat_gf$hour <- dat_gf$minute <- dat_gf$mac <- NULL
        # TODO 
        
        write_to_folders(dat_gf,
                         root_dir = L2, 
                         data_level = "L2",
                         site = si,
                         plot = pl,
                         version = params$L2_VERSION,
                         write_plots = params$write_plots) 
    }
    
}
```

## Summary

```{r summary}
#| echo: false
#| output: asis
if(errors) {
    cat("### WARNING: ", errors, " file read/write error(s)\n")
    log_warning(paste("File read/write error(s)", params$html_outfile), 
                logfile = params$logfile)
}
```

```{r summary_table}
knitr::kable(smry)
```

## Metadata

L2 metadata template directory is `r params$L2_METADATA`.

```{r metadata}

source("metadata-utils.R")

# Write the overall README
readme_fn <- file.path(params$METADATA_ROOT,
                       params$L2_METADATA,
                       params$RELEASE_README_FILES, 
                       paste0("README_v", params$L2_VERSION, ".txt"))
readme <- md_readme_substitutions(readme_fn,
                                  params$L2_VERSION, 
                                  params$L2_RELEASE_DATE, 
                                  sum(smry$Values),
                                  GIT_COMMIT,
                                  params$L2_DATA_TIMEZONE)
readme_outfn <- file.path(L2, basename(readme_fn))
message("Writing overall README ", readme_outfn, "...")
writeLines(readme, readme_outfn)

if(0) {
    
# Get the L1 template file
template_file <- file.path(params$METADATA_ROOT,
                           params$L1_METADATA, 
                           "L1_metadata_template.txt")
if(!file.exists(template_file)) {
    stop("Couldn't find file ", basename(template_file), " in ", params$L1_METADATA)
}
L1_metadata_template <- readLines(template_file)

col_md_for_insert <- paste(sprintf("%-15s", column_md$Column), column_md$Description)

# Get the variable metadata
var_md_for_insert <- md_variable_info(file.path(params$METADATA_ROOT,
                                                params$METADATA_VARS_TABLE))

message("Main template has ", length(L1_metadata_template), " lines")
message("Column metadata info has ", length(col_md_for_insert), " lines")
message("Variable metadata info has ", length(var_md_for_insert), " lines")

# Identify the main data directories in L1/{version}/, which are <site>_<year>
data_dirs <- list.files(L1, pattern = "^[a-zA-Z]+_[0-9]{4}$")
site_files_folder <- file.path(params$METADATA_ROOT, 
                              params$METADATA_SITE_FILES)

for(dd in data_dirs) {
    dd_full <- file.path(L1, dd)
    message("Generating metadata for ", dd_full)
    
    message("\tInserting timestamp and folder name")
    md <- gsub("[TIMESTAMP]", date(), L1_metadata_template, fixed = TRUE)
    md <- gsub("[FOLDER_NAME]", dd, md, fixed = TRUE)
    
    # Insert info on data files into metadata
    md <- md_insert_fileinfo(dd_full, md)
   
    # Insert column metadata
    col_info_pos <- grep("[COLUMN_INFO]", md, fixed = TRUE)
    md <- append(md, col_md_for_insert, after = col_info_pos)
    md <- md[-col_info_pos]
    
    # Insert NA code, time zone, and version information
    md <- md_insert_miscellany(md, 
                               NA_STRING_L1, 
                               params$L1_DATA_TIMEZONE, 
                               params$L1_VERSION)
    
    # Insert variable metadata
    var_info_pos <- grep("[VARIABLE_INFO]", md, fixed = TRUE)
    md <- append(md, var_md_for_insert, after = var_info_pos)
    md <- md[-var_info_pos]
    
    # Site information
    # Folders are <site>_<year>
    site <- strsplit(dd, "_")[[1]][1]
    md <- md_insert_siteinfo(site, site_files_folder, md)

    # Write the final metadata file
    mdfn <- paste0(dd, "_L1_v", params$L1_VERSION, "_metadata.txt")
    message("\tWriting ", mdfn, "...")
    writeLines(md, file.path(L1, dd, mdfn))
}
}
```

## Reproducibility

Git commit `r GIT_COMMIT`.

```{r reproducibility}
sessionInfo()
```
